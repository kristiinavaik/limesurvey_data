import itertools
from fractions import Fraction
from functools import lru_cache
from typing import Dict
from typing import List
from typing import Optional
from typing import Tuple


class DataMatrix:

    def __init__(self, observers: List[Dict[str, Optional[int]]]):
        self._observers = observers

    @property
    @lru_cache()
    def units(self) -> Tuple[str]:
        units = {unit for observer_results in self._observers for unit in observer_results.keys()}
        try:
            # In case units are integers try to retain normal numerical ordering
            return tuple(sorted(units, key=int))
        except ValueError:
            return tuple(sorted(units))

    @property
    @lru_cache()
    def values(self) -> Tuple[int]:

        max_result = 1
        for observer_results in self._observers:
            for result in observer_results.values():
                if result is not None and result > max_result:
                    max_result = result
        return tuple(range(1, max_result + 1))

    @property
    @lru_cache()
    def observer_names(self) -> Tuple[str]:
        return tuple(chr(65 + i) for i in range(len(self._observers)))

    @property
    def values_matrix(self) -> List[List[Optional[int]]]:
        return [
            [observer.get(unit) for unit in self.units]
            for observer in self._observers
        ]

    @property
    @lru_cache()
    def unit_pairs(self) -> Tuple[Tuple[str, str], ...]:
        return tuple(itertools.product(self.values, repeat=2))

    def get_observers_valuing_unit(self, unit) -> int:
        """
        Count number of observers valuing given unit, m_i
        """
        return sum(observer_result.get(unit) is not None for observer_result in self._observers)

    def get_c_k_pairs_in_unit(self, c: int, k: int, unit: str) -> Fraction:
        observers_valuing_unit = self.get_observers_valuing_unit(unit)
        if observers_valuing_unit < 2:
            return Fraction(0)

        c_k_pairs = sum(
            (observer_1.get(unit), observer_2.get(unit)) == (c, k)
            for observer_1, observer_2 in itertools.permutations(self._observers, 2)
        )
        return Fraction(c_k_pairs, observers_valuing_unit - 1)

    def get_observed_coincidence(self, c: int, k: int) -> Fraction:
        """
        Get coincidence for c-k pair o_ck.
        """
        return sum(self.get_c_k_pairs_in_unit(c, k, unit) for unit in self.units)

    def get_observed_coincidence_matrix(self) -> List[List[Fraction]]:
        return [
            [self.get_observed_coincidence(c, k) for k in self.values]
            for c in self.values
        ]

    def print_observed_coincidence_matrix(self):
        observed_coincidence_matrix = self.get_observed_coincidence_matrix()
        for row in observed_coincidence_matrix:
            for element in row:
                print(element, end='\t')
            print()

    @lru_cache()
    def get_number_of_values(self, value: int) -> Fraction:
        return sum(self.get_observed_coincidence(value, another_value) for another_value in self.values)

    @lru_cache()
    def get_total_number_of_values(self) -> int:
        return sum(map(self.get_number_of_values, self.values))

    def __str__(self):
        spacer_width = 80
        rows = [
            '\t'.join(map(str, ('', '|', *self.values, '|'))),
            '―' * spacer_width,
        ]
        observed_coincidence_matrix = self.get_observed_coincidence_matrix()
        for value, row in zip(self.values, observed_coincidence_matrix):
            rows.append('\t'.join(map(str, (value, '|', *row, '|', self.get_number_of_values(value)))))

        n = self.get_total_number_of_values()
        rows.extend([
            '―' * spacer_width,
            '\t'.join(map(str, ('', '|', *map(self.get_number_of_values, self.values), '|', n))),
        ])

        return '\n'.join(rows)

    @lru_cache()
    def compute_krippendorff_alpha(self) -> Fraction:
        def _n(value):
            return self.get_number_of_values(value)

        def _o(c, k):
            return self.get_observed_coincidence(c, k)

        n = self.get_total_number_of_values()

        return Fraction(
            (n - 1) * sum(_o(c, c) for c in self.values) - sum(_n(c) * (_n(c) - 1) for c in self.values),
            n * (n - 1) - sum(_n(c) * (_n(c) - 1) for c in self.values)
        )


if __name__ == '__main__':
    # _observers = [
    #     # Observer A
    #     {'1': 1, '3': 3, '2': 2, '5': 2, '4': 3, '7': 4, '6': 1, '9': 2, '8': 1, '11': None, '10': None, '12': None},
    #     # Observer B
    #     {'1': 1, '3': 3, '2': 2, '5': 2, '4': 3, '7': 4, '6': 2, '9': 2, '8': 1, '11': None, '10': 5, '12': 3},
    #     # Observer C
    #     {'1': None, '3': 3, '2': 3, '5': 2, '4': 3, '7': 4, '6': 3, '9': 2, '8': 2, '11': 1, '10': 5, '12': None},
    #     # Observer D
    #     {'1': 1, '3': 3, '2': 2, '5': 2, '4': 3, '7': 4, '6': 4, '9': 2, '8': 1, '11': 1, '10': 5, '12': None},
    # ]


    _observers =[
        {'0': 1, '1': 0, '2': 0, '3': 0, '4': 0, '5': 0, '6': 1, '7': 3, '8': 0, '9': 0, '10': 0, '11': 1, '12': 1,
      '13': 2, '14': 0, '15': 0, '16': 0, '17': 0, '18': 3, '19': 2, '20': 0, '21': 0, '22': 3, '23': 2, '24': 0,
      '25': 0, '26': 0, '27': 2, '28': 0, '29': 0, '30': 0, '31': 2, '32': 0, '33': 1, '34': 2, '35': 1, '36': 1,
      '37': 0, '38': 1, '39': 1, '40': 3, '41': 1, '42': 3, '43': 1, '44': 0, '45': 1, '46': 1, '47': 0, '48': 0,
      '49': 1, '50': 0, '51': 1, '52': 2, '53': 2, '54': 3, '55': 0, '56': 0, '57': 0, '58': 0, '59': 2, '60': 0,
      '61': 0, '62': 3, '63': 0, '64': 0, '65': 0, '66': 1, '67': 0, '68': 1, '69': 0, '70': 0, '71': 0, '72': 3,
      '73': 1, '74': 0, '75': 2, '76': 0, '77': 1, '78': 0, '79': 1, '80': 0, '81': 0, '82': 2, '83': 0, '84': 0,
      '85': 0, '86': 0, '87': 0, '88': 0, '89': 2, '90': 0, '91': 2, '92': 1, '93': 0, '94': 0, '95': 1, '96': 2,
      '97': 1, '98': 0, '99': 2, '100': 2, '101': 0, '102': 1, '103': 0, '104': 0, '105': 0, '106': 0, '107': 1,
      '108': 0, '109': 0, '110': 0, '111': 0, '112': 0, '113': 3, '114': 0, '115': 3, '116': 0, '117': 1, '118': 2,
      '119': 2},
     {'0': 1, '1': 0, '2': 0, '3': 0, '4': 1, '5': 1, '6': 1, '7': 2, '8': 0, '9': 0, '10': 0, '11': 0, '12': 0,
      '13': 0, '14': 0, '15': 0, '16': 1, '17': 0, '18': 0, '19': 0, '20': 0, '21': 0, '22': 1, '23': 0, '24': 0,
      '25': 0, '26': 0, '27': 1, '28': 0, '29': 0, '30': 1, '31': 1, '32': 1, '33': 0, '34': 2, '35': 0, '36': 1,
      '37': 0, '38': 1, '39': 1, '40': 2, '41': 0, '42': 1, '43': 0, '44': 0, '45': 1, '46': 3, '47': 1, '48': 0,
      '49': 0, '50': 0, '51': 0, '52': 1, '53': 0, '54': 3, '55': 0, '56': 0, '57': 0, '58': 0, '59': 1, '60': 1,
      '61': 0, '62': 0, '63': 0, '64': 0, '65': 0, '66': 0, '67': 0, '68': 0, '69': 0, '70': 0, '71': 0, '72': 0,
      '73': 0, '74': 0, '75': 0, '76': 1, '77': 1, '78': 0, '79': 1, '80': 0, '81': 0, '82': 0, '83': 0, '84': 1,
      '85': 0, '86': 0, '87': 0, '88': 0, '89': 1, '90': 0, '91': 2, '92': 0, '93': 0, '94': 0, '95': 0, '96': 2,
      '97': 0, '98': 0, '99': 3, '100': 1, '101': 1, '102': 1, '103': 0, '104': 0, '105': 0, '106': 0, '107': 0,
      '108': 0, '109': 0, '110': 0, '111': 0, '112': 1, '113': 1, '114': 0, '115': 1, '116': 0, '117': 0, '118': 0,
      '119': 0},
     {'0': 0, '1': 0, '2': 0, '3': 0, '4': 2, '5': 0, '6': 1, '7': 3, '8': 0, '9': 0, '10': 0, '11': 1, '12': 1,
      '13': 1, '14': 2, '15': 0, '16': 0, '17': 0, '18': 0, '19': 2, '20': 0, '21': 0, '22': 2, '23': 0, '24': 0,
      '25': 0, '26': 0, '27': 0, '28': 0, '29': 0, '30': 0, '31': 3, '32': 0, '33': 2, '34': 2, '35': 0, '36': 0,
      '37': 0, '38': 2, '39': 0, '40': 3, '41': 0, '42': 1, '43': 0, '44': 0, '45': 1, '46': 3, '47': 0, '48': 0,
      '49': 0, '50': 0, '51': 1, '52': 0, '53': 2, '54': 2, '55': 0, '56': 1, '57': 0, '58': 0, '59': 2, '60': 0,
      '61': 0, '62': 0, '63': 0, '64': 0, '65': 0, '66': 0, '67': 0, '68': 0, '69': 0, '70': 0, '71': 0, '72': 0,
      '73': 2, '74': 0, '75': 0, '76': 0, '77': 2, '78': 0, '79': 2, '80': 0, '81': 0, '82': 0, '83': 0, '84': 3,
      '85': 0, '86': 0, '87': 0, '88': 0, '89': 0, '90': 0, '91': 1, '92': 0, '93': 0, '94': 0, '95': 0, '96': 1,
      '97': 0, '98': 0, '99': 1, '100': 1, '101': 0, '102': 1, '103': 0, '104': 1, '105': 0, '106': 1, '107': 0,
      '108': 2, '109': 0, '110': 0, '111': 0, '112': 1, '113': 0, '114': 0, '115': 0, '116': 0, '117': 0, '118': 0,
      '119': 0},
     {'0': 1, '1': 0, '2': 0, '3': 3, '4': 2, '5': 1, '6': 1, '7': 3, '8': 2, '9': 2, '10': 0, '11': 1, '12': 1,
      '13': 0, '14': 0, '15': 0, '16': 2, '17': 1, '18': 0, '19': 0, '20': 0, '21': 0, '22': 0, '23': 0, '24': 1,
      '25': 0, '26': 1, '27': 3, '28': 0, '29': 2, '30': 0, '31': 0, '32': 0, '33': 0, '34': 3, '35': 0, '36': 0,
      '37': 0, '38': 0, '39': 1, '40': 3, '41': 1, '42': 1, '43': 0, '44': 1, '45': 0, '46': 3, '47': 1, '48': 0,
      '49': 0, '50': 0, '51': 0, '52': 2, '53': 1, '54': 3, '55': 0, '56': 2, '57': 0, '58': 1, '59': 2, '60': 2,
      '61': 0, '62': 0, '63': 0, '64': 0, '65': 1, '66': 0, '67': 1, '68': 0, '69': 0, '70': 0, '71': 0, '72': 0,
      '73': 2, '74': 0, '75': 2, '76': 0, '77': 1, '78': 0, '79': 0, '80': 0, '81': 0, '82': 2, '83': 0, '84': 1,
      '85': 2, '86': 0, '87': 0, '88': 3, '89': 0, '90': 1, '91': 2, '92': 3, '93': 0, '94': 0, '95': 3, '96': 3,
      '97': 2, '98': 0, '99': 3, '100': 1, '101': 2, '102': 2, '103': 2, '104': 0, '105': 0, '106': 2, '107': 2,
      '108': 0, '109': 0, '110': 0, '111': 0, '112': 0, '113': 0, '114': 0, '115': 1, '116': 0, '117': 0, '118': 0,
      '119': 0},
     {'0': 0, '1': 0, '2': 1, '3': 0, '4': 0, '5': 0, '6': 2, '7': 0, '8': 2, '9': 0, '10': 0, '11': 0, '12': 0,
      '13': 2, '14': 0, '15': 0, '16': 2, '17': 0, '18': 1, '19': 0, '20': 0, '21': 1, '22': 0, '23': 1, '24': 0,
      '25': 1, '26': 1, '27': 0, '28': 0, '29': 0, '30': 2, '31': 0, '32': 0, '33': 0, '34': 1, '35': 0, '36': 0,
      '37': 0, '38': 0, '39': 0, '40': 1, '41': 0, '42': 2, '43': 0, '44': 2, '45': 0, '46': 2, '47': 0, '48': 0,
      '49': 0, '50': 0, '51': 1, '52': 0, '53': 0, '54': 2, '55': 0, '56': 2, '57': 0, '58': 0, '59': 1, '60': 0,
      '61': 1, '62': 2, '63': 0, '64': 2, '65': 0, '66': 0, '67': 1, '68': 2, '69': 0, '70': 0, '71': 2, '72': 2,
      '73': 0, '74': 0, '75': 2, '76': 3, '77': 1, '78': 0, '79': 0, '80': 0, '81': 0, '82': 2, '83': 0, '84': 0,
      '85': 0, '86': 0, '87': 2, '88': 0, '89': 0, '90': 0, '91': 0, '92': 0, '93': 0, '94': 0, '95': 2, '96': 1,
      '97': 0, '98': 1, '99': 3, '100': 0, '101': 0, '102': 0, '103': 0, '104': 0, '105': 0, '106': 0, '107': 0,
      '108': 2, '109': 0, '110': 0, '111': 1, '112': 0, '113': 2, '114': 1, '115': 0, '116': 0, '117': 0, '118': 0,
      '119': 0},
     {'0': 1, '1': 0, '2': 0, '3': 2, '4': 2, '5': 0, '6': 0, '7': 2, '8': 0, '9': 0, '10': 0, '11': 0, '12': 1,
      '13': 0, '14': 0, '15': 0, '16': 0, '17': 1, '18': 0, '19': 0, '20': 2, '21': 0, '22': 0, '23': 0, '24': 0,
      '25': 1, '26': 0, '27': 2, '28': 0, '29': 1, '30': 0, '31': 1, '32': 1, '33': 0, '34': 3, '35': 1, '36': 0,
      '37': 1, '38': 2, '39': 0, '40': 3, '41': 1, '42': 0, '43': 0, '44': 0, '45': 2, '46': 3, '47': 1, '48': 0,
      '49': 1, '50': 1, '51': 0, '52': 3, '53': 1, '54': 2, '55': 0, '56': 0, '57': 0, '58': 1, '59': 3, '60': 1,
      '61': 0, '62': 0, '63': 0, '64': 0, '65': 1, '66': 0, '67': 0, '68': 0, '69': 0, '70': 0, '71': 0, '72': 0,
      '73': 1, '74': 0, '75': 0, '76': 0, '77': 0, '78': 0, '79': 1, '80': 1, '81': 0, '82': 0, '83': 0, '84': 2,
      '85': 0, '86': 0, '87': 0, '88': 2, '89': 0, '90': 0, '91': 2, '92': 2, '93': 0, '94': 0, '95': 2, '96': 3,
      '97': 1, '98': 1, '99': 3, '100': 2, '101': 0, '102': 2, '103': 0, '104': 1, '105': 0, '106': 2, '107': 0,
      '108': 0, '109': 0, '110': 0, '111': 0, '112': 1, '113': 0, '114': 0, '115': 0, '116': 0, '117': 1, '118': 0,
      '119': 0},
     {'0': 0, '1': 0, '2': 0, '3': 0, '4': 0, '5': 1, '6': 0, '7': 2, '8': 1, '9': 0, '10': 0, '11': 0, '12': 1,
      '13': 0, '14': 0, '15': 0, '16': 0, '17': 0, '18': 0, '19': 2, '20': 0, '21': 0, '22': 2, '23': 0, '24': 0,
      '25': 2, '26': 1, '27': 3, '28': 0, '29': 0, '30': 1, '31': 0, '32': 0, '33': 0, '34': 2, '35': 0, '36': 0,
      '37': 2, '38': 0, '39': 2, '40': 3, '41': 1, '42': 0, '43': 0, '44': 0, '45': 1, '46': 3, '47': 1, '48': 0,
      '49': 0, '50': 0, '51': 0, '52': 2, '53': 0, '54': 3, '55': 1, '56': 0, '57': 0, '58': 0, '59': 2, '60': 1,
      '61': 0, '62': 0, '63': 0, '64': 1, '65': 0, '66': 0, '67': 0, '68': 0, '69': 1, '70': 1, '71': 0, '72': 0,
      '73': 2, '74': 2, '75': 0, '76': 0, '77': 1, '78': 0, '79': 1, '80': 0, '81': 2, '82': 0, '83': 0, '84': 0,
      '85': 1, '86': 0, '87': 0, '88': 2, '89': 0, '90': 0, '91': 2, '92': 2, '93': 0, '94': 0, '95': 1, '96': 0,
      '97': 2, '98': 1, '99': 3, '100': 1, '101': 0, '102': 0, '103': 2, '104': 1, '105': 0, '106': 1, '107': 0,
      '108': 0, '109': 0, '110': 1, '111': 0, '112': 2, '113': 0, '114': 0, '115': 1, '116': 2, '117': 0, '118': 0,
      '119': 0},
     {'0': 0, '1': 0, '2': 0, '3': 0, '4': 0, '5': 1, '6': 0, '7': 2, '8': 0, '9': 0, '10': 0, '11': 0, '12': 0,
      '13': 0, '14': 0, '15': 0, '16': 0, '17': 2, '18': 0, '19': 0, '20': 0, '21': 0, '22': 1, '23': 0, '24': 0,
      '25': 0, '26': 0, '27': 2, '28': 0, '29': 0, '30': 0, '31': 0, '32': 0, '33': 1, '34': 2, '35': 0, '36': 0,
      '37': 0, '38': 2, '39': 0, '40': 3, '41': 1, '42': 0, '43': 0, '44': 0, '45': 0, '46': 2, '47': 0, '48': 0,
      '49': 0, '50': 0, '51': 0, '52': 2, '53': 0, '54': 2, '55': 0, '56': 0, '57': 0, '58': 0, '59': 0, '60': 0,
      '61': 2, '62': 0, '63': 0, '64': 0, '65': 0, '66': 0, '67': 0, '68': 0, '69': 0, '70': 0, '71': 0, '72': 0,
      '73': 1, '74': 0, '75': 0, '76': 0, '77': 2, '78': 0, '79': 1, '80': 0, '81': 0, '82': 0, '83': 0, '84': 1,
      '85': 0, '86': 0, '87': 0, '88': 0, '89': 0, '90': 0, '91': 1, '92': 2, '93': 0, '94': 1, '95': 0, '96': 0,
      '97': 0, '98': 1, '99': 3, '100': 1, '101': 0, '102': 2, '103': 0, '104': 0, '105': 0, '106': 0, '107': 1,
      '108': 0, '109': 0, '110': 0, '111': 0, '112': 2, '113': 0, '114': 0, '115': 0, '116': 1, '117': 0, '118': 0,
      '119': 0}]


    dm = DataMatrix(_observers)
    print(dm)
    alpha = dm.compute_krippendorff_alpha()
    print()
    print(f'alpha = {alpha}')
    print(f'alpha ~= {float(alpha)}')
